<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sql.member.mapper">

	<insert id="join" parameterType="member">
		INSERT INTO
		MEMBER(MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_TELE, MEMBER_ADDR)
		VALUES(#{memberId}, #{memberPw}, #{memberName},#{memberTele},#{memberAddr})
	</insert>
	<select id="findIdExist" parameterType="String" resultType="member">
		SELECT MEMBER_ID FROM MEMBER WHERE MEMBER_ID = #{memberId}
	</select>
	<insert id="addAccount" parameterType="hashmap">
		INSERT INTO
		ACCOUNT(ACCOUNT_NUMBER, MEMBER_ID)
		VALUES(#{accountNumber}, #{memberId})
	</insert>
	
	
	<select id="login" parameterType="hashmap" resultType="member">
		SELECT MEMBER_ID, MEMBER_PW FROM MEMBER
		WHERE MEMBER_ID=#{memberId} AND MEMBER_PW=#{memberPw}
	</select>
	
	<update id="updateCharacter" parameterType="hashmap">
		UPDATE MEMBER SET MEMBER_CHAR = #{memberChar} WHERE MEMBER_ID=#{memberId}
	</update>
	
	<select id="findAllTransaction" parameterType="String" resultType="transaction">
		SELECT TRANSACTION_TIME, TRANSACTION_STORE, TRANSACTION_AMT, STORE_ID
		FROM TRANSACTION
		WHERE ACCOUNT_NUMBER = #{VALUE}
	</select>
	
	<select id="findTransactionBySpecificPeriod" parameterType="hashmap" resultType="transaction">
		SELECT TRANSACTION_TIME, TRANSACTION_STORE, TRANSACTION_AMT, STORE_ID
		FROM TRANSACTION
		WHERE ACCOUNT_NUMBER = #{accountNumber}
		AND TRANSACTION_TIME BETWEEN #{startDay} AND #{finishDay}
	</select>
	
	<select id="findTransactionByMonthPeriod" parameterType="hashmap" resultType="transaction">
		SELECT TRANSACTION_TIME, TRANSACTION_STORE, TRANSACTION_AMT, STORE_ID
		FROM TRANSACTION
		WHERE ACCOUNT_NUMBER = #{accountNumber}
		AND TRANSACTION_TIME BETWEEN (SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-#{month}),'YYYY-MM-DD') FROM DUAL) AND SYSDATE
		ORDER BY TRANSACTION_TIME DESC
	</select>

	<insert id="addExternalTrasaction" parameterType="transactionReqDTO">
		INSERT INTO 
		TRANSACTION(TRANSACTION_ID, ACCOUNT_NUMBER, STORE_ID, TRANSACTION_TIME, TRANSACTION_STORE, TRANSACTION_AMT, TRANSACTION_MEMO)
		VALUES(#{transactionId}, #{accountNumber}, #{storeId}, #{transactionTime}. #{transactionStore}, #{transactionAmt}, #{transactionMemo})
	</insert>
	
	<update id="pay" parameterType="hashmap">
		UPDATE ACCOUNT
		SET account_balance=#{balance}
		WHERE ACCOUNT_NUMBER=#{accountNumber}
	</update>
	
	
	<insert id="addTransaction" parameterType="transaction">
		INSERT INTO 
		TRANSACTION(TRANSACTION_ID, ACCOUNT_NUMBER, STORE_ID, TRANSACTION_TIME, TRANSACTION_STORE, TRANSACTION_AMT)
		VALUES(TRANSACTION_SEQ.NEXTVAL, #{accountNumber}, #{storeId}, #{transactionTime}, #{transactionStore}, #{transactionAmt})
	</insert>
	<select id="getTotalVisit" parameterType="String" resultType="int">
		SELECT STORE_TOTALVISIT FROM STORE WHERE STORE_ID=#{storeId}
	</select>
	<update id="updateTotalVisit" parameterType="hashmap">
		UPDATE STORE SET STORE_TOTALVISIT=#{totalVisit} WHERE STORE_ID=#{storeId} 
	</update>
	
	
	<update id="updateTransactionMemo" parameterType="transaction">
		UPDATE TRANSACTION 
		SET TRANSACTION_MEMO = #{transactionMemo} 
		WHERE TRANSACTION_ID=#{transactionId}
	</update>
	
	<select id="findAccount" parameterType="String" resultType="account">
		SELECT ACCOUNT_NUMBER, MEMBER_ID, ACCOUNT_BALANCE, ACCOUNT_INNER
		FROM ACCOUNT
		WHERE MEMBER_ID=#{memberId}
	</select>
	
	<select id="getBalance" parameterType="String" resultType="int">
		SELECT account_balance
		FROM ACCOUNT
		WHERE ACCOUNT_NUMBER=#{accountNumber}
	</select>
	
	<update id="charge" parameterType="hashmap">
		UPDATE ACCOUNT
		SET ACCOUNT_BALANCE = #{balance}
		WHERE ACCOUNT_NUMBER = #{accountNumber}
	</update>	
	
</mapper>