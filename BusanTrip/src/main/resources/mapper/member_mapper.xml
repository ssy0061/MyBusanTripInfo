<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sql.member.mapper">

	<insert id="join" parameterType="member">
		INSERT INTO
		MEMBER(MEMBER_ID, MEMBER_PW, MEMBER_NAME, MEMBER_TELE, MEMBER_ADDR, MEMBER_GENDER, MEMBER_AGE)
		VALUES(#{memberId}, #{memberPw}, #{memberName},#{memberTele},#{memberAddr},#{memberGender},#{memberAge})
	</insert>
	<select id="findIdExist" parameterType="String" resultType="member">
		SELECT MEMBER_ID FROM MEMBER WHERE MEMBER_ID = #{memberId}
	</select>
	<insert id="addAccount" parameterType="hashmap">
		INSERT INTO
		ACCOUNT(ACCOUNT_NUMBER, MEMBER_ID)
		VALUES(#{accountNumber}, #{memberId})
	</insert>
	
	<select id="findMemberInfo" parameterType="String" resultType="member">
		SELECT MEMBER_NAME, MEMBER_TELE, MEMBER_ADDR, MEMBER_CHAR, MEMBER_GENDER, MEMBER_AGE
		FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
	</select>
	
	<select id="findMemberName" parameterType="String" resultType="String">
		SELECT MEMBER_NAME
		FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
	</select>
	
	<select id="login" parameterType="hashmap" resultType="member">
		SELECT MEMBER_ID, MEMBER_PW, MEMBER_CHAR FROM MEMBER
		WHERE MEMBER_ID=#{memberId} AND MEMBER_PW=#{memberPw}
	</select>
	
	<update id="updateCharacter" parameterType="hashmap">
		UPDATE MEMBER SET MEMBER_CHAR = #{memberChar} WHERE MEMBER_ID=#{memberId}
	</update>
	
	<select id="findAllTransaction" parameterType="String" resultType="transaction">
		SELECT TRANSACTION_TIME, TRANSACTION_STORE, TRANSACTION_AMT, STORE_ID
		FROM TRANSACTION
		WHERE ACCOUNT_NUMBER = #{VALUE}
		ORDER BY TRANSACTION_TIME DESC
	</select>
	
	<select id="findTransactionByTransactionId" parameterType="int" resultType="transaction">
		SELECT TRANSACTION_ID, ACCOUNT_NUMBER, STORE_ID, TRANSACTION_TIME, TRANSACTION_STORE, TRANSACTION_AMT, TRANSACTION_MEMO, MEMBER_ID
		FROM TRANSACTION
		WHERE TRANSACTION_ID = #{transactionId}
	</select>
	
	<select id="findTransactionBySpecificPeriod" parameterType="hashmap" resultType="transaction">
		SELECT TRANSACTION_ID, TRANSACTION_TIME, TRANSACTION_STORE, TRANSACTION_AMT, STORE_ID, TRANSACTION_MEMO
		FROM TRANSACTION
		WHERE ACCOUNT_NUMBER = #{accountNumber}
		AND TRANSACTION_TIME BETWEEN #{startDay} AND TO_DATE(#{finishDay}, 'YYYY-MM-DD HH24:MI')
		ORDER BY TRANSACTION_TIME DESC
	</select>
	
	<select id="findTransactionByMonthPeriod" parameterType="hashmap" resultType="transaction">
		SELECT TRANSACTION_ID, TRANSACTION_TIME, TRANSACTION_STORE, TRANSACTION_AMT, STORE_ID
		FROM TRANSACTION
		WHERE ACCOUNT_NUMBER = #{accountNumber}
		AND TRANSACTION_TIME BETWEEN (SELECT TO_CHAR(ADD_MONTHS(SYSDATE,-#{month}),'YYYY-MM-DD') FROM DUAL) AND SYSDATE
		ORDER BY TRANSACTION_TIME DESC
	</select>

	<insert id="addExternalTrasaction" parameterType="transactionReqDTO">
		INSERT INTO 
		TRANSACTION(TRANSACTION_ID, ACCOUNT_NUMBER, ACCOUNT_BANK, MEMBER_ID, STORE_ID, TRANSACTION_TIME, TRANSACTION_STORE, TRANSACTION_AMT, TRANSACTION_MEMO)
		VALUES(TRANSACTION_SEQ.NEXTVAL, #{accountNumber}, #{accountBank}, #{memberId}, #{storeId}, #{transactionTime}. #{transactionStore}, #{transactionAmt}, #{transactionMemo})
	</insert>
	
	<update id="pay" parameterType="hashmap">
		UPDATE ACCOUNT
		SET account_balance=#{balance}
		WHERE ACCOUNT_NUMBER=#{accountNumber}
	</update>
	
	
	<insert id="addTransaction" parameterType="transaction">
		INSERT INTO 
		TRANSACTION(TRANSACTION_ID, ACCOUNT_NUMBER, MEMBER_ID, STORE_ID, TRANSACTION_TIME, TRANSACTION_STORE, TRANSACTION_AMT)
		VALUES(TRANSACTION_SEQ.NEXTVAL, #{accountNumber}, #{memberId}, #{storeId}, #{transactionTime}, #{transactionStore}, #{transactionAmt})
	</insert>
	<select id="findTotalVisit" parameterType="String" resultType="int">
		SELECT STORE_TOTALVISIT FROM STORE WHERE STORE_ID=#{storeId}
	</select>
	<update id="updateTotalVisit" parameterType="hashmap">
		UPDATE STORE SET STORE_TOTALVISIT=#{totalVisit} WHERE STORE_ID=#{storeId} 
	</update>
	
	
	<update id="updateTransactionMemo" parameterType="transaction">
		UPDATE TRANSACTION 
		SET TRANSACTION_MEMO = #{transactionMemo} 
		WHERE TRANSACTION_ID=#{transactionId}
	</update>

	<select id="findAllAccount" parameterType="String" resultType="account">
		SELECT ACCOUNT_NUMBER, MEMBER_ID, ACCOUNT_BALANCE, ACCOUNT_INNER, ACCOUNT_BANK
		FROM ACCOUNT
		WHERE MEMBER_ID=#{memberId}
	</select>
	
	<select id="findBalance" parameterType="String" resultType="int">
		SELECT account_balance
		FROM ACCOUNT
		WHERE ACCOUNT_NUMBER=#{accountNumber}
	</select>
	
	<select id="findPointBalance" parameterType="String" resultType="int">
		SELECT account_balance
		FROM ACCOUNT
		WHERE MEMBER_ID=#{memberId} AND ACCOUNT_INNER='Y'
	</select>
	
	<select id="findPointAccount" parameterType="String" resultType="String">
		SELECT ACCOUNT_NUMBER
		FROM ACCOUNT
		WHERE MEMBER_ID=#{memberId} AND ACCOUNT_INNER='Y'
	</select>
	
	<update id="charge" parameterType="hashmap">
		UPDATE ACCOUNT
		SET ACCOUNT_BALANCE = #{balance}
		WHERE ACCOUNT_NUMBER = #{accountNumber}
	</update>

	<select id="findMemberVisitStats" parameterType="String" resultType="Map">
		SELECT STORE_CATEGORY AS CATEGORY, CNT AS COUNT
		FROM(SELECT S.STORE_CATEGORY, COUNT(S.STORE_CATEGORY) CNT
			FROM STORE S, TRANSACTION T
			WHERE S.STORE_ID = T.STORE_ID AND T.MEMBER_ID = 'gwak222'
			GROUP BY S.STORE_CATEGORY
			ORDER BY CNT DESC)
	</select>
	
	<update id="updateMemberInfo" parameterType="hashmap">
		UPDATE MEMBER
		SET MEMBER_PW = #{memberPw}, MEMBER_TELE = #{memberTele}, MEMBER_ADDR = #{memberAddr}
		WHERE MEMBER_ID=#{memberId}
	</update>
	
	<!-- Python MachineLearning관련 -->
	
	<!-- FLASK에 보낼 데이터.. -->
	<select id="findInputDataToML" parameterType="String" resultType="Map">
		SELECT SUM(TRANSACTION_AMT) AS TOTAL_AMT, COUNT(*) AS TRANSACTION_COUNT, AVG(TRANSACTION_AMT) AS AVG_AMT, MAX(TRANSACTION_AMT) AS MAX_AMT, MIN(TRANSACTION_AMT) AS MIN_AMT,
		M.MEMBER_GENDER, TRUNC(M.MEMBER_AGE,-1) AS MEMBER_AGE
		FROM TRANSACTION T, MEMBER M
		WHERE T.MEMBER_ID = #{memberId} AND M.MEMBER_ID = #{memberId}
		GROUP BY MEMBER_GENDER, MEMBER_AGE
	</select>
	
	<select id="findTotalAmtByCategory" parameterType="hashmap" resultType='Map'>
		SELECT SUM(SUM(T.TRANSACTION_AMT)) AS TOTAL_AMT, COUNT(TRANSACTION_AMT) AS COUNT_AMT
		FROM TRANSACTION T, STORE S
		WHERE T.MEMBER_ID = #{memberId} AND S.STORE_CATEGORY = #{storeCategory} AND T.STORE_ID = S.STORE_ID
		GROUP BY T.TRANSACTION_AMT
	</select>
	
</mapper>